package simulator.parts.core.pipelineelements;

import simulator.ISA.BaseInstruction;
import simulator.ISA.RTypeInstruction;
import simulator.parts.core.Registers;



/**
 * Instruction decode
 * @author Tim
 *
 */
public class InstructionDecode {
	
	public InstructionDecode(){
		
	}
	
	/**
	 * @param ins
	 * @return
	 */
	public BaseInstruction instructionDecode(String ins){
		// Process types
		
		// Pipeline bubble/idle cpu
		if(ins == null)
			return null;
		
		// Now we do the decode... We first have to get the opCode
		String opCode = ins.substring(0, 6);
		// If it is
//		System.out.println(opCode);
		
		switch (opCode) {
		case "000000":
			// ADD
			decodeRTypeInstruction(ins);
			
			break;

		default:
			break;
		}
		
		
	/*	String opType = ins.getOpType();
		switch (opType) {
		/**
		 * Seeing as we are doing a proper instruction decode.
		 * Take the register and reflect this onto the register objects
		 */
/*		case "R":
			RTypeInstruction a = ((RTypeInstruction)ins);
//			a.setDecodedRD(a.getFetchedRD(Registers.getRegisters().getRegister(i)));
			// Set the decoded aspects
			a.setDecodedRD(Registers.getRegisters().getRegister(a.getFetchedRD())	);
			a.setDecodedRS(Registers.getRegisters().getRegister(a.getFetchedRS())	);
			a.setDecodedRT(Registers.getRegisters().getRegister(a.getFetchedRT())	);
						
			
			break;
			// with reflection
//			Object foo = Class.forName("complete.classpath.and.Foo").newInstance();
//			Method m = foo.getClass().getDeclaredMethod("hello", new Class<?>[0]);
//			m.invoke(foo);
		default:
			break;
		}
	*/	
		return null;
	}
	private RTypeInstruction decodeRTypeInstruction(String ins){
		String opCode = ins.substring(0, 6);
		RTypeInstruction decodedIns;
		// If it is
//		System.out.println(opCode);
		
		switch (opCode) {
		case "000000":
			// ADD
			
			
			break;

		default:
			break;
		}
		
		return null;
		
	}
}
